name: Unit Test And Deploying to Docker Hub

on:
  
  pull_request:
    branches: [ "master" ]

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:14
        # Provide the password for postgres
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password
          POSTGRES_DB: simple_bank
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with: 
        go-version: 1.19
      id: go-install
    
    - name: check out code into the go module directory
      uses: actions/checkout@v3

    - name: installing golang-migration 
      run: |
        curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.2/migrate.linux-amd64.tar.gz | tar xvz
        sudo mv migrate /usr/bin/migrate
        which migrate
    
    - name: run migration
      run: make dbup

    - name: Test
      run: make test

  deploy:
    
    name: deploy to docker hub
    runs-on: ubuntu-latest
    needs: test

    #allow to run this workflow manually from the actions tab
    #workflow_dispatch:

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}  
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }} #/bank.now:latest
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

    # if: startsWith(github.ref, 'refs/tags')
    
    # steps:  

    #   - name: Extract version from
    #     id: version_step
    #     run: |
    #       echo "##[set-output name=version;]VERSION=${GITHUB_REF#$"refs/tags/v"}"
    #       echo "##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$"refs/tags/v"}"
    #       echo "##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest"
      
    #   - name: Print version
    #     run: |
    #       echo ${{steps.version_step.outputs.version_tag}}
    #       echo ${{steps.version_step.outputs.latest_tag}}
      
    #   - name: Set Up QEMU
    #     uses: docker/setup-qemu-action@v1
      
    #   - name: Set Up Docker Buildx
    #     uses: docker/setup-buildx-action@v1
    
    #   - name: Login to DockerHub
    #     uses: docker/login-action@v1
    #     with: 
    #       username: ${{secrets.DOCKER_USERNAME}}
    #       password: ${{secrets.DOCKER_PASSWORD}}
    
    #   - name: PrepareReg Names
    #     id: read-docker-image-identifiers
    #     run: |
    #       echo VERSION_TAG=$(echo ${{ steps.version_step.outputs.version_tag }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
    #       echo LASTEST_TAG=$(echo ${{ steps.version_step.outputs.latest_tag  }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
    
    #   - name: Build and push
    #     id: docker_build
    #     uses: docker/build-push-action@v2
    #     with:
    #       load: true
    #       tags: |
    #         ${{env.VERSION_TAG}}
    #         ${{env.LASTEST_TAG}}
    #       build-args: 
    #         ${{steps.version_step.outputs.version}}